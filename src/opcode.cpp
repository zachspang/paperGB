#include "cpu.h"
#include "common.cpp"

uint8_t CPU::n8() {
    return gb.mmu.read(PC++);
}

uint16_t CPU::n16() {
    return (gb.mmu.read(PC++) << 8) | gb.mmu.read(PC++);
}

void CPU::execute_opcode(uint8_t opcode) {
	switch (opcode) {
	case 0xCB: execute_CB_opcode(gb.mmu.read(PC++)); break;

    case 0x00: NOP(); break;
    case 0x01: LD(BC, n16()); break;
    case 0x02: LD(*gb.mmu.ptr(BC.get_word()), AF.high); break;
    case 0x03: INC(BC); break;
    case 0x04: INC(BC.high); break;
    case 0x05: DEC(BC.high); break;
    case 0x06: LD(BC.high, n8()); break;
    case 0x07: RLCA();  break;
    case 0x08: LD(n16()); break;
    case 0x09: ADD(HL, BC.get_word()); break; 
    case 0x0A: LD(AF.high, gb.mmu.read(BC.get_word())); break;
    case 0x0B: DEC(BC); break;
    case 0x0C: INC(BC.low); break;
    case 0x0D: DEC(BC.low); break;
    case 0x0E: LD(BC.low, n8()); break;
    case 0x0F: RRCA(); break;

    case 0x10: STOP(); n8(); break;
    case 0x11: LD(DE, n16()); break;
    case 0x12: LD(*gb.mmu.ptr(DE.get_word()), AF.high); break;
    case 0x13: INC(DE); break;
    case 0x14: INC(DE.high); break;
    case 0x15: DEC(DE.high); break;
    case 0x16: LD(DE.high, n8()); break;
    case 0x17: RLA();  break;
    case 0x18: JR(n8()); break;
    case 0x19: ADD(HL, DE.get_word()); break;
    case 0x1A: LD(AF.high, gb.mmu.read(DE.get_word())); break;
    case 0x1B: DEC(DE); break;
    case 0x1C: INC(DE.low); break;
    case 0x1D: DEC(DE.low); break;
    case 0x1E: LD(DE.low, n8()); break;
    case 0x1F: RRA(); break;

    case 0x20: if (!get_flag(Z)) JR(n8()); else n8(); break;
    case 0x21: LD(HL, n16()); break;
    case 0x22: LD_HLI(*gb.mmu.ptr(HL.get_word()), AF.high); break;
    case 0x23: INC(HL); break;
    case 0x24: INC(HL.high); break;
    case 0x25: DEC(HL.high); break;
    case 0x26: LD(HL.high, n8()); break;
    case 0x27: DAA();  break;
    case 0x28: if (get_flag(Z)) JR(n8()); else n8(); break;
    case 0x29: ADD(HL, HL.get_word()); break;
    case 0x2A: LD_HLI(AF.high, gb.mmu.read(HL.get_word())); break;
    case 0x2B: DEC(HL); break;
    case 0x2C: INC(HL.low); break;
    case 0x2D: DEC(HL.low); break;
    case 0x2E: LD(HL.low, n8()); break;
    case 0x2F: CPL; break;

    case 0x30: if (!get_flag(C)) JR(n8()); else n8(); break;
    case 0x31: LD(SP, n16()); break;
    case 0x32: LD_HLD(*gb.mmu.ptr(HL.get_word()), AF.high); break;
    case 0x33: INC(SP); break;
    case 0x34: INC(*gb.mmu.ptr(HL.get_word())); gb.tick_other_components(); break;
    case 0x35: DEC(*gb.mmu.ptr(HL.get_word())); gb.tick_other_components(); break;
    case 0x36: LD(*gb.mmu.ptr(HL.get_word()), n8()); break;
    case 0x37: SCF();  break;
    case 0x38: if (get_flag(C)) JR(n8()); else n8(); break;
    case 0x39: ADD(HL, SP.get_word()); break;
    case 0x3A: LD_HLD(AF.high, gb.mmu.read(HL.get_word())); break;
    case 0x3B: DEC(SP); break;
    case 0x3C: INC(AF.high); break;
    case 0x3D: DEC(AF.high); break;
    case 0x3E: LD(AF.high, n8()); break;
    case 0x3F: CCF; break;

    case 0x40: LD(BC.high, BC.high); break;
    case 0x41: LD(BC.high, BC.low); break;
    case 0x42: LD(BC.high, DE.high); break;
    case 0x43: LD(BC.high, DE.low); break;
    case 0x44: LD(BC.high, HL.high); break;
    case 0x45: LD(BC.high, HL.low); break;
    case 0x46: LD(BC.high, gb.mmu.read(HL.get_word())); break;
    case 0x47: LD(BC.high, AF.high); break;
    case 0x48: LD(BC.low, BC.high); break;
    case 0x49: LD(BC.low, BC.low); break;
    case 0x4A: LD(BC.low, DE.high); break;
    case 0x4B: LD(BC.low, DE.low); break;
    case 0x4C: LD(BC.low, HL.high); break;
    case 0x4D: LD(BC.low, HL.low); break;
    case 0x4E: LD(BC.low, gb.mmu.read(HL.get_word())); break;
    case 0x4F: LD(BC.low, AF.high); break;

    case 0x50: LD(DE.high, BC.high); break;
    case 0x51: LD(DE.high, BC.low); break;
    case 0x52: LD(DE.high, DE.high); break;
    case 0x53: LD(DE.high, DE.low); break;
    case 0x54: LD(DE.high, HL.high); break;
    case 0x55: LD(DE.high, HL.low); break;
    case 0x56: LD(DE.high, gb.mmu.read(HL.get_word())); break;
    case 0x57: LD(DE.high, AF.high); break;
    case 0x58: LD(DE.low, BC.high); break;
    case 0x59: LD(DE.low, BC.low); break;
    case 0x5A: LD(DE.low, DE.high); break;
    case 0x5B: LD(DE.low, DE.low); break;
    case 0x5C: LD(DE.low, HL.high); break;
    case 0x5D: LD(DE.low, HL.low); break;
    case 0x5E: LD(DE.low, gb.mmu.read(HL.get_word())); break;
    case 0x5F: LD(DE.low, AF.high); break;

    case 0x60: LD(HL.high, BC.high); break;
    case 0x61: LD(HL.high, BC.low); break;
    case 0x62: LD(HL.high, DE.high); break;
    case 0x63: LD(HL.high, DE.low); break;
    case 0x64: LD(HL.high, HL.high); break;
    case 0x65: LD(HL.high, HL.low); break;
    case 0x66: LD(HL.high, gb.mmu.read(HL.get_word())); break;
    case 0x67: LD(HL.high, AF.high); break;
    case 0x68: LD(HL.low, BC.high); break;
    case 0x69: LD(HL.low, BC.low); break;
    case 0x6A: LD(HL.low, DE.high); break;
    case 0x6B: LD(HL.low, DE.low); break;
    case 0x6C: LD(HL.low, HL.high); break;
    case 0x6D: LD(HL.low, HL.low); break;
    case 0x6E: LD(HL.low, gb.mmu.read(HL.get_word())); break;
    case 0x6F: LD(HL.low, AF.high); break;

    case 0x70: LD(*gb.mmu.ptr(HL.get_word()), BC.high); break;
    case 0x71: LD(*gb.mmu.ptr(HL.get_word()), BC.low); break;
    case 0x72: LD(*gb.mmu.ptr(HL.get_word()), DE.high); break;
    case 0x73: LD(*gb.mmu.ptr(HL.get_word()), DE.low); break;
    case 0x74: LD(*gb.mmu.ptr(HL.get_word()), HL.high); break;
    case 0x75: LD(*gb.mmu.ptr(HL.get_word()), HL.low); break;
    case 0x76: HALT(); break;
    case 0x77: LD(*gb.mmu.ptr(HL.get_word()), AF.high); break;
    case 0x78: LD(AF.high, BC.high); break;
    case 0x79: LD(AF.high, BC.low); break;
    case 0x7A: LD(AF.high, DE.high); break;
    case 0x7B: LD(AF.high, DE.low); break;
    case 0x7C: LD(AF.high, HL.high); break;
    case 0x7D: LD(AF.high, HL.low); break;
    case 0x7E: LD(AF.high, gb.mmu.read(HL.get_word())); break;
    case 0x7F: LD(AF.high, AF.high); break;

    case 0x80: break;
    case 0x81: break;
    case 0x82: break;
    case 0x83: break;
    case 0x84: break;
    case 0x85: break;
    case 0x86: break;
    case 0x87: break;
    case 0x88: break;
    case 0x89: break;
    case 0x8A: break;
    case 0x8B: break;
    case 0x8C: break;
    case 0x8D: break;
    case 0x8E: break;
    case 0x8F: break;

    case 0x90: break;
    case 0x91: break;
    case 0x92: break;
    case 0x93: break;
    case 0x94: break;
    case 0x95: break;
    case 0x96: break;
    case 0x97: break;
    case 0x98: break;
    case 0x99: break;
    case 0x9A: break;
    case 0x9B: break;
    case 0x9C: break;
    case 0x9D: break;
    case 0x9E: break;
    case 0x9F: break;

    case 0xA0: break;
    case 0xA1: break;
    case 0xA2: break;
    case 0xA3: break;
    case 0xA4: break;
    case 0xA5: break;
    case 0xA6: break;
    case 0xA7: break;
    case 0xA8: break;
    case 0xA9: break;
    case 0xAA: break;
    case 0xAB: break;
    case 0xAC: break;
    case 0xAD: break;
    case 0xAE: break;
    case 0xAF: break;

    case 0xB0: break;
    case 0xB1: break;
    case 0xB2: break;
    case 0xB3: break;
    case 0xB4: break;
    case 0xB5: break;
    case 0xB6: break;
    case 0xB7: break;
    case 0xB8: break;
    case 0xB9: break;
    case 0xBA: break;
    case 0xBB: break;
    case 0xBC: break;
    case 0xBD: break;
    case 0xBE: break;
    case 0xBF: break;

    case 0xC0: break;
    case 0xC1: break;
    case 0xC2: break;
    case 0xC3: break;
    case 0xC4: break;
    case 0xC5: break;
    case 0xC6: break;
    case 0xC7: break;
    case 0xC8: break;
    case 0xC9: break;
    case 0xCA: break;
    case 0xCC: break;
    case 0xCD: break;
    case 0xCE: break;
    case 0xCF: break;

    case 0xD0: break;
    case 0xD1: break;
    case 0xD2: break;
    case 0xD3: break;
    case 0xD4: break;
    case 0xD5: break;
    case 0xD6: break;
    case 0xD7: break;
    case 0xD8: break;
    case 0xD9: break;
    case 0xDA: break;
    case 0xDB: break;
    case 0xDC: break;
    case 0xDD: break;
    case 0xDE: break;
    case 0xDF: break;

    case 0xE0: break;
    case 0xE1: break;
    case 0xE2: break;
    case 0xE3: break;
    case 0xE4: break;
    case 0xE5: break;
    case 0xE6: break;
    case 0xE7: break;
    case 0xE8:
        //ADD SP, e8 4m
        gb.tick_other_components();
        gb.tick_other_components();
        ADD(SP, gb.mmu.read(PC++));
        set_flag(Z, 0);
        break;
    case 0xE9: break;
    case 0xEA: break;
    case 0xEB: break;
    case 0xEC: break;
    case 0xED: break;
    case 0xEE: break;
    case 0xEF: break;

    case 0xF0: break;
    case 0xF1: break;
    case 0xF2: break;
    case 0xF3: break;
    case 0xF4: break;
    case 0xF5: break;
    case 0xF6: break;
    case 0xF7: break;
    case 0xF8: break;
    case 0xF9: break;
    case 0xFA: break;
    case 0xFB: break;
    case 0xFC: break;
    case 0xFD: break;
    case 0xFE: break;
    case 0xFF: break;
    default: LOG_WARN("Invalid opcode 0x%s", opcode);
	}
}

void CPU::execute_CB_opcode(uint8_t opcode) {
    switch (opcode) {
    case 0x00: break;
    case 0x01: break;
    case 0x02: break;
    case 0x03: break;
    case 0x04: break;
    case 0x05: break;
    case 0x06: break;
    case 0x07: break;
    case 0x08: break;
    case 0x09: break;
    case 0x0A: break;
    case 0x0B: break;
    case 0x0C: break;
    case 0x0D: break;
    case 0x0E: break;
    case 0x0F: break;

    case 0x10: break;
    case 0x11: break;
    case 0x12: break;
    case 0x13: break;
    case 0x14: break;
    case 0x15: break;
    case 0x16: break;
    case 0x17: break;
    case 0x18: break;
    case 0x19: break;
    case 0x1A: break;
    case 0x1B: break;
    case 0x1C: break;
    case 0x1D: break;
    case 0x1E: break;
    case 0x1F: break;

    case 0x20: break;
    case 0x21: break;
    case 0x22: break;
    case 0x23: break;
    case 0x24: break;
    case 0x25: break;
    case 0x26: break;
    case 0x27: break;
    case 0x28: break;
    case 0x29: break;
    case 0x2A: break;
    case 0x2B: break;
    case 0x2C: break;
    case 0x2D: break;
    case 0x2E: break;
    case 0x2F: break;

    case 0x30: break;
    case 0x31: break;
    case 0x32: break;
    case 0x33: break;
    case 0x34: break;
    case 0x35: break;
    case 0x36: break;
    case 0x37: break;
    case 0x38: break;
    case 0x39: break;
    case 0x3A: break;
    case 0x3B: break;
    case 0x3C: break;
    case 0x3D: break;
    case 0x3E: break;
    case 0x3F: break;

    case 0x40: break;
    case 0x41: break;
    case 0x42: break;
    case 0x43: break;
    case 0x44: break;
    case 0x45: break;
    case 0x46: break;
    case 0x47: break;
    case 0x48: break;
    case 0x49: break;
    case 0x4A: break;
    case 0x4B: break;
    case 0x4C: break;
    case 0x4D: break;
    case 0x4E: break;
    case 0x4F: break;

    case 0x50: break;
    case 0x51: break;
    case 0x52: break;
    case 0x53: break;
    case 0x54: break;
    case 0x55: break;
    case 0x56: break;
    case 0x57: break;
    case 0x58: break;
    case 0x59: break;
    case 0x5A: break;
    case 0x5B: break;
    case 0x5C: break;
    case 0x5D: break;
    case 0x5E: break;
    case 0x5F: break;

    case 0x60: break;
    case 0x61: break;
    case 0x62: break;
    case 0x63: break;
    case 0x64: break;
    case 0x65: break;
    case 0x66: break;
    case 0x67: break;
    case 0x68: break;
    case 0x69: break;
    case 0x6A: break;
    case 0x6B: break;
    case 0x6C: break;
    case 0x6D: break;
    case 0x6E: break;
    case 0x6F: break;

    case 0x70: break;
    case 0x71: break;
    case 0x72: break;
    case 0x73: break;
    case 0x74: break;
    case 0x75: break;
    case 0x76: break;
    case 0x77: break;
    case 0x78: break;
    case 0x79: break;
    case 0x7A: break;
    case 0x7B: break;
    case 0x7C: break;
    case 0x7D: break;
    case 0x7E: break;
    case 0x7F: break;

    case 0x80: break;
    case 0x81: break;
    case 0x82: break;
    case 0x83: break;
    case 0x84: break;
    case 0x85: break;
    case 0x86: break;
    case 0x87: break;
    case 0x88: break;
    case 0x89: break;
    case 0x8A: break;
    case 0x8B: break;
    case 0x8C: break;
    case 0x8D: break;
    case 0x8E: break;
    case 0x8F: break;

    case 0x90: break;
    case 0x91: break;
    case 0x92: break;
    case 0x93: break;
    case 0x94: break;
    case 0x95: break;
    case 0x96: break;
    case 0x97: break;
    case 0x98: break;
    case 0x99: break;
    case 0x9A: break;
    case 0x9B: break;
    case 0x9C: break;
    case 0x9D: break;
    case 0x9E: break;
    case 0x9F: break;

    case 0xA0: break;
    case 0xA1: break;
    case 0xA2: break;
    case 0xA3: break;
    case 0xA4: break;
    case 0xA5: break;
    case 0xA6: break;
    case 0xA7: break;
    case 0xA8: break;
    case 0xA9: break;
    case 0xAA: break;
    case 0xAB: break;
    case 0xAC: break;
    case 0xAD: break;
    case 0xAE: break;
    case 0xAF: break;

    case 0xB0: break;
    case 0xB1: break;
    case 0xB2: break;
    case 0xB3: break;
    case 0xB4: break;
    case 0xB5: break;
    case 0xB6: break;
    case 0xB7: break;
    case 0xB8: break;
    case 0xB9: break;
    case 0xBA: break;
    case 0xBB: break;
    case 0xBC: break;
    case 0xBD: break;
    case 0xBE: break;
    case 0xBF: break;

    case 0xC0: break;
    case 0xC1: break;
    case 0xC2: break;
    case 0xC3: break;
    case 0xC4: break;
    case 0xC5: break;
    case 0xC6: break;
    case 0xC7: break;
    case 0xC8: break;
    case 0xC9: break;
    case 0xCA: break;
    case 0xCB: break;
    case 0xCC: break;
    case 0xCD: break;
    case 0xCE: break;
    case 0xCF: break;

    case 0xD0: break;
    case 0xD1: break;
    case 0xD2: break;
    case 0xD3: break;
    case 0xD4: break;
    case 0xD5: break;
    case 0xD6: break;
    case 0xD7: break;
    case 0xD8: break;
    case 0xD9: break;
    case 0xDA: break;
    case 0xDB: break;
    case 0xDC: break;
    case 0xDD: break;
    case 0xDE: break;
    case 0xDF: break;

    case 0xE0: break;
    case 0xE1: break;
    case 0xE2: break;
    case 0xE3: break;
    case 0xE4: break;
    case 0xE5: break;
    case 0xE6: break;
    case 0xE7: break;
    case 0xE8: break;
    case 0xE9: break;
    case 0xEA: break;
    case 0xEB: break;
    case 0xEC: break;
    case 0xED: break;
    case 0xEE: break;
    case 0xEF: break;

    case 0xF0: break;
    case 0xF1: break;
    case 0xF2: break;
    case 0xF3: break;
    case 0xF4: break;
    case 0xF5: break;
    case 0xF6: break;
    case 0xF7: break;
    case 0xF8: break;
    case 0xF9: break;
    case 0xFA: break;
    case 0xFB: break;
    case 0xFC: break;
    case 0xFD: break;
    case 0xFE: break;
    case 0xFF: break;
    default: LOG_WARN("Invalid opcode 0xCB%s", opcode);
    }
}